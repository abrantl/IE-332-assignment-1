\documentclass[11pt]{article}

%  USE PACKAGES  ---------------------- 
\usepackage[margin=0.7in,vmargin=1in]{geometry}
\usepackage{amsmath,amsthm,amsfonts}
\usepackage{amssymb}
\usepackage{fancyhdr}
\usepackage{enumerate}
\usepackage{mathtools}
\usepackage{hyperref,color}
\usepackage{enumitem,amssymb}
\usepackage{textcomp}
\usepackage{listings}
\usepackage{textcomp}
\newlist{todolist}{itemize}{4}
\setlist[todolist]{label=$\square$}
\usepackage{pifont}
\newcommand{\cmark}{\ding{51}}%
\newcommand{\xmark}{\ding{55}}%
\newcommand{\done}{\rlap{$\square$}{\raisebox{2pt}{\large\hspace{1pt}\cmark}}%
\hspace{-2.5pt}}
\newcommand{\HREF}[2]{\href{#1}{#2}}
\usepackage{textcomp}
\usepackage{listings}
\lstset{
basicstyle=\small\ttfamily,
% columns=flexible,
upquote=true,
breaklines=true,
showstringspaces=false
}
\usepackage{graphicx} %package to manage images
\graphicspath{ {./images/} }
%  -------------------------------------------- 

%  HEADER AND FOOTER (DO NOT EDIT) ----------------------
\newcommand{\problemnumber}{0}
\pagestyle{fancy}
\fancyhead{}
\fancyhead[L]{\textbf{Question \problemnumber}}
\newcommand{\newquestion}[1]{
\clearpage % page break and flush floats
\renewcommand{\problemnumber}{#1} % set problem number for header
\phantom{}  % Put something on the page so it shows
}
\fancyfoot[L]{IE 332}
\fancyfoot[C]{Assignment submission}
\fancyfoot[R]{Page \thepage}
\renewcommand{\footrulewidth}{0.4pt}

%  --------------------------------------------


%  COVER SHEET (FILL IN THE TABLE AS INSTRUCTED IN THE ASSIGNMENT) ----------------------
\newcommand{\addcoversheet}{
\clearpage
\thispagestyle{empty}
\vspace*{0.5in}

\begin{center}
\Huge{{\bf IE332 Assignment \#1}} % <-- replace with correct assignment #

Due: Feb 24th, 11:59pm EST % <-- replace with correct due date and time
\end{center}

\vspace{0.3in}

\noindent We have {\bf read and understood the assignment instructions}. We certify that the submitted work does not violate any academic misconduct rules, and that it is solely our own work. By listing our names below we acknowledge that any misconduct will result in appropriate consequences. 

\vspace{0.2in}

\noindent {\em ``As a Boilermaker pursuing academic excellence, I pledge to be honest and true in all that I do.
Accountable together -- we are Purdue.''}


\vspace{0.3in}

\begin{table}[h!]
  \begin{center}
    \label{tab:table1}
    \begin{tabular}{c|ccccc|c|c}
      Student & Q1 & Q2 & Q3 & Q4 & Q5 & Overall & DIFF\\
      \hline
      Anna Brantley & 10 & 70 & 10 & 10 & 40 & 140 & 15\\
      Vishal Tijo & 70 & 10 & 10 & 10 & 10 & 110 & -15\\
      Francisca Cevallos & 10 & 10 & 70 & 10 & 40 & 140 & 15 \\
      Maude Frappart & 10 & 10 & 10 & 70 & 10 & 110 & -15\\
      \hline
      St Dev & 26 & 26 & 26 & 26 & 21 & 21 & 21
    \end{tabular}
  \end{center}
\end{table}

\vspace{0.2in}

\noindent Date: \today.
}
%  -----------------------------------------

%  TODO LIST (COMPLETE THE FULL CHECKLIST - USE AS EXAMPLE THE FIRST CHECKED BOXES!) ----------------------
\newcommand{\addtodo}{
\clearpage
\thispagestyle{empty}

\section*{Read Carefully. Important!}

\noindent By electronically uploading this assignment to Brightspace you acknowledge these statements and accept any repercussions if in any violation of ANY Purdue Academic Misconduct policies. You must upload your homework on time for it to be graded. No late assignments will be accepted. {\bf Only the last uploaded version of your assignment before the due date will be graded}.

\vspace{0.2in}

\noindent {\bf NOTE:} You should aim to submit no later than 30 minutes before the deadline, as there could be last minute network traffic that would cause your assignment to be late, resulting in a grade of zero. 

\vspace{0.2in}

\noindent When submitting your assignment it is assumed that every student considers the below checklist, as there are grading consequences otherwise (e.g., not submitting a cover sheet is an automatic grade of ZERO).

\begin{todolist}

    \item[\done] Your solutions were prepared using the \LaTeX template provided in Brightspace. 
    \item[\done] Your submission has a cover sheet as its first page and this checklist as its second page, according to the template provided.
	 \item[\done] All of your solutions (program code, etc.) are included in the submission as requested. % Check this checkbox and the following ones if satisfied <---
    \item[\done] You have not included any screen shots, photos, etc. (plots should be intermediately saved as .png files and then added into your .tex file). % <---
	 \item[\done] All math notation and algorithms (algorithmic environment) are created using appropriate \LaTeX code (no pictures, handwritten solutions, etc.). % <---
    \item[\done] The .pdf is submitted as an individual file and not in a {\tt .zip}.
    \item[\done] You kept the \LaTeX source code in your files until this assignment is graded, in case you are required to show proof of creating your assignment using \LaTeX.  % <---
    \item[\done] If submitting with a partner, your partner is added in the submission section in Gradescope after you upload your file. % <---
    \item[\done] You have correctly matched each question to its page \# in the .pdf submission in the Gradescope section (after you uploaded your file).
    \item[\done] Watch videos on creating pseudocode if you need a refresher or quick reference to the idea. These are good starter videos:    % <---
    
     \HREF{https://www.youtube.com/watch?v=4jLO0vXPktU}{www.youtube.com/watch?v=4jLO0vXPktU} 
    
    \HREF{https://www.youtube.com/watch?v=yGvfltxHKUU}{www.youtube.com/watch?v=yGvfltxHKUU}
\end{todolist}
}

%% LaTeX
% Für alle, die die Schönheit von Wissenschaft anderen zeigen wollen
% For anyone who wants to show the beauty of science to others

%  -----------------------------------------


\begin{document}


\addcoversheet
\addtodo

% BEGIN YOUR ASSIGNMENT HERE:

% Question 1
\newquestion{1}

a.
\begin{lstlisting}

<?php

$string = "'The result is: '";
$value = 0;

main:
$r9 = readline('');
if ($r9 <= 0) {
	goto end;
}
$r0 = $value;
++$r0;
if ($r9 >= 1) {
	goto end;
}
$r2 = $r0;
$r1 = $r2;
$r8 = 1;

loop:
$r0 = $r1 + $r2;
$r2 = $r1;
$r1 = $r0;
++$r8;
if ($r9 >= $r8) {
	goto end;
}
goto loop;

end:
$value = $r0
$r7 = strin1
print $r7
print $r0

?>
\end{lstlisting}
\newpage
b. 

\begin{tabular}{ | p{8cm} | p{7cm}|} 
  \hline
\begin{lstlisting}
int Ck(int n, int k){
    double res = 1;
    for (int i = 1; i <= k; ++i)
        res = res*(n - k + i) / i;
    return (int)(res);
}
int main() {
    int n = 5;
    int k = 2;
    int res;
    res = Ck(n, k);
    printf("Result: %d\n", res);
}
\end{lstlisting}
& 
\begin{lstlisting}
Ck:	
    lw $r0, n
    lw $r1, k
    .word res 1
    mov $r4, 1	
    loop:	
    .word i 1
    lw $r2, i
    add $r2, $r2, 1
    .word temp n
    lw $r3, temp
    sub $r3, $r3, $r1
    add $r3, $r3, $r2
    div $r3, $r3, $r2
    mul $r4, $r4, $r3
    ble i, k, loop
    sw $r4, res 
    b mainFuncCallEnd

mainStart: 
    .word n, 5
    .word k, 2
    .word res
    lw $r4, res 
    b Ck
mainFuncCallEnd:
    .asciiz Result: , string1
    lw $r5, string1
    .asciiz Result: , string2
    lw $r6, string2
    print $r5
    print $r4
    print $r6 
    done
\end{lstlisting} \\
\hline
\end{tabular}

\newpage
c.
\begin{lstlisting}
let string = '"Resulting array = '";
let string2 = '"t'";
const arr = [1, 2, 3, 4, 5, 5, 6];
let r0 = arr.length;
const arr_rev = [0, 0, 0, 0, 0, 0, 0];
let r1 = 0;
let r2 = r0;
while (r1 < r2) {
arr_rev[r1] = arr[r2] + 0;
r1 = r1 + 1;
r2 = r2 -1;
}
let r3 = string;
document.write(r3);
let r4 = string2;
document.write(string2);
let r5 = 0;

function printing() {
	let r5 = arr_rev[r5]
	document.write(r5);
document.write(r4);
++r5;
if (r5 < r0) {
	printing();
}
}
\end{lstlisting}

% Question 2
\newquestion{2}
\begin{lstlisting}
a. 

Declare int function (int num) 
	
	If num < 0: 
		
		Return function(–num) 
	
	End if 

	If num=0 or num=7: 

		Return 1 

	End if 

	If num < 10: 

		Return 0 

	End if 

	return num /10 - 2 * (num-num/10*10) 

End function 
\end{lstlisting}

\begin{lstlisting}
b. 

Declare int function (int n) 

	If n = 0: 

		Return 1 

	End if 

	Else:  
	
		Return n * function(n-1) 

End function 
\end{lstlisting}

\begin{lstlisting}
c. 

Declare int main() 

Declare int arr[] = {25, 11, 7, 75, 56} 

Declare int length = 5 

Declare int max = arr[0] 

	For i = 0 to length–1: 

		If arr[i] > max: 

			Max = arr[i] 

		End if 

	End for 

	Print max 

End main 
\end{lstlisting}

\begin{lstlisting}
d. 

Declare int function (int s) 

Declare sum = 0 

Declare n=1 

	For (sum < s): 

		sum = sum + (n *n *n) 

		n = n + 1 

	End for 

	Return sum 

End function 
\end{lstlisting}

\begin{lstlisting}
e. 

Declare struct pair 

Declare int min 

Declare int max 

Declare struct pair function (int arr[0], int n) 

Declare minmax = tuple()

Declare int i 

	If (n=1): 

		minmax.max = arr[0] 

		minmax.min = arr[0] 

		return minmax 

	End if 

	If (arr[0] > arr[1]): 

		minmax.max = arr[0] 

		minmax.min = arr[1] 

	End if 

	Else: 

		minmax.max = arr[1] 

		minmax.min = arr[0] 

	End else 

	For (i = 2; i < n; i++): 

		if (arr[I] > minmax.max): 

			minmax.max = arr[I] 

		else if (arr[I] < minmax.min): 

			minmax.min = arr[I] 

		end if 

	End for 

	Return minmax 

End function 
\end{lstlisting}

 

%Question 3
\newquestion{3}

a) 
\begin{lstlisting}[language=SQL, frame=single]
SELECT staff.first_name, staff.last_name, staff.email, city.city, address.district, country.country, address.address 
FROM staff 
JOIN store ON staff.staff_id = store.manager_staff_id 
JOIN address ON store.address_id = address.address_id 
JOIN city ON address.city_id = city.city_id 
JOIN country ON city.country_id = country.country_id 
\end{lstlisting}
\includegraphics[width=\textwidth]{(a).png}

b) 
\begin{lstlisting}[language=SQL, frame=single]
SELECT inventory.inventory_id, inventory.store_id, film.title, film.rating, film.rental_rate, film.replacement_cost 
FROM inventory, film
\end{lstlisting}
\includegraphics[scale = 0.55]{(b).png}

c) 
\begin{lstlisting}[language=SQL, frame=single]
SELECT store_id, rating, COUNT( rating )  AS number_items 
FROM inventory, film 
WHERE film.film_id = inventory.film_id 
GROUP  BY film.rating, store_id 
ORDER  BY store_id DESC 
\end{lstlisting}
\includegraphics[scale = 0.55]{(c).png}


d) 
\begin{lstlisting}[language=SQL, frame=single]
SELECT category.name, store.store_ID, SUM( film.replacement_cost ) AS total_replacement_cost, AVG( film.replacement_cost ) AS average_replacement_cost, COUNT( film.film_ID ) AS film_count
FROM film
JOIN film_category ON film.film_ID = film_category.film_ID
JOIN category ON film_category.category_ID = category.category_ID
JOIN inventory ON film.film_ID = inventory.film_ID
JOIN store ON inventory.store_ID = store.store_ID
GROUP BY store.store_ID, category.name;
\end{lstlisting}
\includegraphics[scale = 0.60]{d.png}
\newpage
e)
\begin{lstlisting}[language=SQL, frame=single]
SELECT customer.first_name, customer.last_name, COUNT( payment.rental_id ) AS quantity_of_rentals, SUM(payment.amount )  AS total_revenue 
FROM customer 
JOIN rental ON customer.customer_id = rental.customer_id 
JOIN payment ON rental.rental_id = payment.rental_id 
GROUP  BY customer.customer_id 
HAVING SUM( payment.amount )  >150 
ORDER  BY total_revenue DESC 
\end{lstlisting}
\includegraphics[scale = 0.55]{(e).png}

f)
\begin{lstlisting}[language=SQL, frame=single]
SELECT title, rental_rate
FROM film
WHERE rental_rate = (SELECT MAX(rental_rate) FROM film)
GROUP BY title ASC
\end{lstlisting}
\includegraphics[scale = 0.50]{f.png}

g)
\begin{lstlisting}[language=SQL, frame=single]
SELECT c.first_name, c.last_name, c.email, p.total_spent 
FROM customer c 
JOIN ( 
		SELECT customer_id, SUM( amount )  AS total_spent 
		FROM payment 
            WHERE YEAR( payment_date )  =2005 
		AND MONTH( payment_date )  =6 
	GROUP  BY customer_id 
HAVING SUM( amount )  > (  
SELECT AVG( total_spent )  
FROM ( 
SELECT SUM( amount )  AS total_spent 
FROM payment 
WHERE YEAR( payment_date )  =2005 
AND MONTH( payment_date )  =6 
GROUP  BY customer_id )  AS j 
) 
) AS p ON c.customer_id = p.customer_id 
\end{lstlisting}
\includegraphics[scale = 0.50]{(g).png}


%Question 4
\newquestion{4}
\includegraphics{crowsfoot}

%Question 5
\newquestion{5}

\newline
a.
\newline
i.)Traditional software must be personally installed, managed, maintained and upgraded. Additionally, the software can only be installed on local computers and servers.
On the other hand, SaaS software provides the company with a complete cloud service and the software application is ready to use quickly.
Also, many users can access the information at the same time.   
\newline
\newline
ii.)SaaS application is much more cost efficient as it is typically consumed on a subscription-based model. 
Therefore, the maintainance and management of the application for the company and those costs are included as monthly or annual payments.
SaaS applications are scalable. It is easy to add more databases depending on your needs and easily accessibility as everything is stored on the cloud. 
This allows for multiple users on different machines to access the information.  
\newline
\newline
b. 
\newline
Adopting IIOT facilitates companies to improve their productivity and efficiency, as well as providing them multiple economic benefits.
A great advantage of adopting IIOT into a company’s process is the accessibility of information. 
IIOT provides real-time information to everyone who is part of the server, and this allows them to make decisions quickly and accurately as they have the latest data.
Consequently, the company increases their competitivity within the market. 
However, adopting IIOT also has a higher risk of failure as well as major financial loss could occur; adopting this system is expensive and difficult. 
Additionally, since everything is stored on the internet, there exists a high chance of cyber-attacks.  
\newline
\newline
c. 
\newline
A virtual machine is a virtual environment that acts like an independent or isolated computer with its own CPU, memory, etc. 
This operating system can be installed on top of other operating systems in your personal computer’s hardware. The common uses of virtual machines are: 
Abstraction of the operating systems from the hardware: This allows the business to complete backups of the operating system as snapshots. 
Then, snapshots can be easily translated into another machine.  Virtual machines can be easily secured, are portable and not dependent on physical server. 
\newline
\newline
d.
\newline
i.
Seasonality analysis can dictate the quantity to purchase at a given point as well as the intended sell date for the items. 
Demand for item types and specific items fluctuates with time, so understanding these trends allows for better inventory management and sales forecasting.
\newline
\newline
ii. 
A SCM manager has to consider cost, ship time, and environmental impact when deciding on transportation methods. 
For example, higher cost by way of transportation such as air can help to minimize ship time as well as environmental impact. 
\newline
\newline
iii. 
The advantage to a capillary storage network is minimizing the lead time, whereas a single, large storage facility can lower costs as well as reduce the complexity of product fulfillment planning. 
\newline
\newline
iv. 
The demand planning team is responsible for creating accurate demand forecasts as well as coordinating all organizational departments to fit with current sales and production planning. 
\newline
\newline
v. 
The three pillars are service, inventory, and costs. Improving service quality (higher quality products, lower lead times, etc.) increases both general and inventory specific costs. 
Reducing inventory will increase profitability with a section specific outlook through lower cash investment and inventory expenses, but reduces service quality which can lead to lower demand. 
Costs must be kept low as it has the most direct impact on profit margins through reduction of expenditure, but solely reducing can have negative impacts on both service quality and inventory investment, leading to lower profitability. 
\newline
\newline
\newline
e.
\newline
i. 
The original goal of creating the internet via ARPANet was to allow for communication between US military installations during and post nuclear war with Russia.
\newline
\newline
ii. 
The birthday of the internet is on Oct. 29th, 1969 when the first instant message was sent. 
\newline
\newline
iii. 
The internet archive was created in 1996 and is a database of every single webpage possible. It was created to allow for “universal access to all knowledge.”
\newline
\newline
iv. 
The origin of the word spam comes from a Monty Python skit where the word is repeated several times, intending to indicate the annoying nature of “spam.” 90\% of the emails sent over the internet are classified as spam.
\newline
\newline
v.
The deep web is 500 times bigger than the surface web.
\newline
\newline
vi.
It is possible to access the internet from outer space.
\newline
\newline
vii.
Domain names are allowed to have 63 characters.

\end{document}
